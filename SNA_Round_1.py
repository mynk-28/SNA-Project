# -*- coding: utf-8 -*-
"""SNARound_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bgrVcPxkf1PnNbDm3K-zOm7zsqqzPG98
"""

import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import csv
import random

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/My Drive/SNA Project/p2p-Gnutella05.txt"

res=[]
with open(path) as f:
  data = f.readlines()
for l in data:
  if l:
    words = l.split()
    res.append(words)

sample = random.sample(res, 10000)
filename=open('data1.txt','a')
for item in sample:
  filename.write(item[0] + " " + item[1] + "\n")

G = nx.read_edgelist(path,nodetype=int,create_using=nx.Graph())
#print(nx.info(G))

G1 = nx.read_edgelist('data1.txt',nodetype=int,create_using=nx.Graph())

m=3
degree_freq = nx.degree_histogram(G)
degrees = range(len(degree_freq))
plt.figure(figsize=(12, 8)) 
plt.loglog(degrees[m:], degree_freq[m:],'go-') 
plt.xlabel('Degree')
plt.ylabel('Frequency')

print("Maximum degree of node is",len(degree_freq)-1)

cnt=0
sum=0
cnt_nodes=0
for d in degree_freq:
        sum = sum + d*cnt
        cnt = cnt + 1
        cnt_nodes = cnt_nodes + d

#cnt_nodes
#print(sum)
avg_degree = sum/cnt_nodes
avg_degree

cnt=0
sum=0

for d in degree_freq:
        sum = sum + d*((cnt - avg_degree)**2)
        cnt = cnt + 1


std_dev_in = (sum/cnt_nodes)**0.5
std_dev_in

"""# **Centrality Measures**

**Degree Centrality**
"""

DegreeCentrality = nx.degree_centrality(G1)
DegreeCentrality

plt.figure(figsize=(12, 8)) 
key = list(DegreeCentrality.keys());
value = list(DegreeCentrality.values());
plt.bar(key,value, color ='maroon',width=10) 
plt.xlabel('Node')
plt.ylabel('Degree')
plt.show()

print("Maximum value of Degree Centrality is",max(DegreeCentrality.values()))

"""**Eigen Vector Centrality**"""

eigenVectorCentrality = nx.eigenvector_centrality_numpy(G1)
eigenVectorCentrality

plt.figure(figsize=(12, 8)) 
key = list(eigenVectorCentrality.keys());
value = list(eigenVectorCentrality.values());
plt.bar(key,value, color ='maroon',width=10
        ) 
plt.xlabel('Node')
plt.ylabel('Degree')
plt.show()

print("Maximum value of eigenVector Centrality is",max(eigenVectorCentrality.values()))

"""**Katz Centrality**"""

katzCentrality = nx.katz_centrality(G1,max_iter=10000)
katzCentrality

plt.figure(figsize=(12, 8)) 
key = list(katzCentrality.keys());
value = list(katzCentrality.values());
plt.bar(key,value, color ='maroon',width=10
        ) 
plt.xlabel('Node')
plt.ylabel('Degree')
plt.show()

print("Maximum value of Katz Centrality is",max(katzCentrality.values()))

"""**Page Rank Centrality**"""

pageRankCentrality = nx.pagerank(G1, max_iter = 10000)
pageRankCentrality

plt.figure(figsize=(12, 8)) 
key = list(pageRankCentrality.keys());
value = list(pageRankCentrality.values());

plt.bar(key,value, color ='maroon',width=10
        ) 
plt.xlabel('Node')
plt.ylabel('Degree')
plt.show()

print("Maximum value of Page Rank Centrality is",max(pageRankCentrality.values()))

"""**Closenness Centrality**"""

closenessCentrality = nx.closeness_centrality(G1)
closenessCentrality

plt.figure(figsize=(12, 8)) 
key = list(closenessCentrality.keys());
value = list(closenessCentrality.values());
plt.bar(key,value, color ='maroon',width=10
        ) 
plt.xlabel('Node')
plt.ylabel('Degree')
plt.show()

print("Maximum value of Closeness Centrality is",max(closenessCentrality.values()))

"""**Betweenness Centrality**"""

betweennessCentrality = nx.betweenness_centrality(G1)
betweennessCentrality

plt.figure(figsize=(12, 8)) 
key = list(betweennessCentrality.keys());
value = list(betweennessCentrality.values());
plt.bar(key,value, color ='maroon',width=10
        ) 
plt.xlabel('Node')
plt.ylabel('Degree')
plt.show()

print("Maximum value of Betweenness Centrality is",max(betweennessCentrality.values()))

"""# **Clustering Coefficient**"""

localClusteringCoefficient=nx.clustering(G)
localClusteringCoefficient

globalClusteringCoefficient = nx.average_clustering(G)
globalClusteringCoefficient

reciprocity=nx.overall_reciprocity(G)
transitivity=nx.transitivity(G)

print(reciprocity)
print(transitivity)